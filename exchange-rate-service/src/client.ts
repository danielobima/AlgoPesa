/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "transaction(account,uint64)string": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  source: {
    approval:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudHJhbnNmZXIuY29udHJhY3QuVHJhbnNmZXIuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBUcmFuc2ZlcihBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDUKICAgIG1ldGhvZCAidHJhbnNhY3Rpb24oYWNjb3VudCx1aW50NjQpc3RyaW5nIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl90cmFuc2FjdGlvbl9yb3V0ZUAyCiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX3RyYW5zYWN0aW9uX3JvdXRlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhbnNmZXIvY29udHJhY3QucHk6NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBUcmFuc2ZlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiB0cmFuc2FjdGlvbgogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBUcmFuc2ZlcihBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIHJlamVjdCB0cmFuc2FjdGlvbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgaW50IDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy50cmFuc2Zlci5jb250cmFjdC5UcmFuc2Zlci50cmFuc2FjdGlvbihhZGRyOiBieXRlcywgYW1vdW50OiBieXRlcykgLT4gYnl0ZXM6CnRyYW5zYWN0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYW5zZmVyL2NvbnRyYWN0LnB5OjUtNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB0cmFuc2FjdGlvbihzZWxmLCBhZGRyOiBBY2NvdW50LCBhbW91bnQ6IGFyYzQuVUludDY0ICkgLT4gYXJjNC5TdHJpbmc6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo4LTEyCiAgICAvLyB0cnggPSBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgYW1vdW50PWFtb3VudC5uYXRpdmUsCiAgICAvLyAgICAgZmVlPTEwMDAsCiAgICAvLyAgICAgcmVjZWl2ZXI9YWRkciwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo5CiAgICAvLyBhbW91bnQ9YW1vdW50Lm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhbnNmZXIvY29udHJhY3QucHk6MTAKICAgIC8vIGZlZT0xMDAwLAogICAgaW50IDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYW5zZmVyL2NvbnRyYWN0LnB5OjgKICAgIC8vIHRyeCA9IGl0eG4uUGF5bWVudCgKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo4LTEyCiAgICAvLyB0cnggPSBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgYW1vdW50PWFtb3VudC5uYXRpdmUsCiAgICAvLyAgICAgZmVlPTEwMDAsCiAgICAvLyAgICAgcmVjZWl2ZXI9YWRkciwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhbnNmZXIvY29udHJhY3QucHk6MTQKICAgIC8vIHJldHVybiBhcmM0LlN0cmluZygic3VjY2VzcyIpCiAgICBieXRlICJceDAwXHgwN3N1Y2Nlc3MiCiAgICByZXRzdWIK",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudHJhbnNmZXIuY29udHJhY3QuVHJhbnNmZXIuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFuc2Zlci9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBUcmFuc2ZlcihBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo=",
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 0,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {},
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "Transfer",
    methods: [
      {
        name: "transaction",
        args: [
          {
            type: "account",
            name: "addr",
          },
          {
            type: "uint64",
            name: "amount",
          },
        ],
        returns: {
          type: "string",
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {
    no_op: "CREATE",
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC };
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC };
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC };
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: "delete_application" | OnApplicationComplete.DeleteApplicationOC };
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: "update_application" | OnApplicationComplete.UpdateApplicationOC };
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, "sendParams"> & {
  sendParams?: Omit<
    SendTransactionParams,
    "skipSending" | "atc" | "skipWaiting" | "maxRoundsToWaitForConfirmation" | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  "skipWaiting" | "maxRoundsToWaitForConfirmation" | "populateAppCallResources" | "suppressLog"
>;

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>;
};

/**
 * Defines the types of available calls and state of the Transfer smart contract.
 */
export type Transfer = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "transaction(account,uint64)string" | "transaction",
    {
      argsObj: {
        addr: string | Uint8Array;
        amount: bigint | number;
      };
      argsTuple: [addr: string | Uint8Array, amount: bigint | number];
      returns: string;
    }
  >;
};
/**
 * Defines the possible abi call signatures
 */
export type TransferSig = keyof Transfer["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends TransferSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the Transfer smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TransferSig> = Transfer["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the Transfer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TransferSig> = Transfer["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type TransferCreateCalls = (typeof TransferCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type TransferCreateCallParams = TypedCallParams<undefined> & OnCompleteNoOp;
/**
 * Defines arguments required for the deploy method.
 */
export type TransferDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: TransferCreateCalls) => TransferCreateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TransferCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Transfer smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & OnCompleteNoOp = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the transaction(account,uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transaction(args: MethodArgs<"transaction(account,uint64)string">, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: "transaction(account,uint64)string" as const,
      methodArgs: Array.isArray(args) ? args : [args.addr, args.amount],
      ...params,
    };
  }
}

/**
 * A client to make calls to the Transfer smart contract
 */
export class TransferClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `TransferClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Transfer["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter);
  }

  /**
   * Idempotently deploys the Transfer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TransferDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(TransferCallFactory.create);
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the Transfer smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(
        args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & OnCompleteNoOp = {}
      ) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args));
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the Transfer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the transaction(account,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transaction(args: MethodArgs<"transaction(account,uint64)string">, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TransferCallFactory.transaction(args, params));
  }

  public compose(): TransferComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      transaction(args: MethodArgs<"transaction(account,uint64)string">, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.transaction(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(undefined);
        return this;
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender))
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)),
        };
      },
    } as unknown as TransferComposer;
  }
}
export type TransferComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the transaction(account,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transaction(
    args: MethodArgs<"transaction(account,uint64)string">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): TransferComposer<[...TReturns, MethodReturn<"transaction(account,uint64)string">]>;

  /**
   * Makes a clear_state call to an existing instance of the Transfer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): TransferComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): TransferComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<TransferComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<TransferComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], "txnGroups">;
export type TransferComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type TransferComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
